    //Создаем функцию POST запроса на серв:
    const postData = async (url, data) => {
        //Посылаем запрос на сервер по url который передаем как аргумент функции (у нас асинхронный код, который сперва делает запрос, ждет ответа от сервера и пока он ждет ответа у нас в переменную res ничего не записывается, поэтому чтобы не было ошибки перед функцией ставим async которая говорит что у нас будет асинхронный код, и перед асинхронным кодом ставим await(js будет ждать окончания запроса и потом только подставит в переменную и пойдет выполняться дальше)):
        const res = await fetch(url, {
            method: "POST",
            headers: {
                'Content-type': 'application/json; charset=utf-8'
            },
            body: data //сюда прописываем то, что мы передаем на сервер(у нас это FormData в формате JSON)
        });

        return await res.json(); //трансформируем полученный ответ в json, по перед этим прописываем так же await так как мы не знаем сколько времени займет эта трансформация
    };

    //Создаем функцию GET запроса с сервера:
    async function getResource(url) {
        //Посылаем запрос на сервер по url который передаем как аргумент функции (у нас асинхронный код, который сперва делает запрос, ждет ответа от сервера и пока он ждет ответа у нас в переменную res ничего не записывается, поэтому чтобы не было ошибки перед функцией ставим async которая говорит что у нас будет асинхронный код, и перед асинхронным кодом ставим await(js будет ждать окончания запроса и потом только подставит в переменную и пойдет выполняться дальше)):
        let res = await fetch(url);

        //Обрабатываем поведение fetch чтобы отлавливать ошибки(fetch если столкнется с какой то ошибкой в http запросе он не выдаст catch(reject) а выдаст только при отстутсвии инета или других критических ошибок в самом запросе):

        if (!res.ok) {
            throw new Error(`Could not fetch ${url}, status: ${res.status}`); //создаем объект ошибки куда помещаем текст ошибки c помошью метода throw(выкидывает из функции)
        }

        return await res.json(); //трансформируем полученный ответ в json, по перед этим прописываем так же await так как мы не знаем сколько времени займет эта трансформация
    }


    export {postData};
    export {getResource};